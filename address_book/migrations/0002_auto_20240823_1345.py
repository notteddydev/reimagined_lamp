# Generated by Django 5.0.6 on 2024-07-11 20:52

import csv

from django.conf import settings
from django.db import migrations
from address_book import constants


def insert_address_types(apps, schema_editor):
    AddressType = apps.get_model("address_book", "AddressType")

    address_types = [
        (constants.ADDRESSTYPE__NAME_HOME, "Home",),
        (constants.ADDRESSTYPE__NAME_WORK, "Work",),
        (constants.ADDRESSTYPE__NAME_DOM, "Domestic",),
        (constants.ADDRESSTYPE__NAME_INTL, "International",),
        (constants.ADDRESSTYPE__NAME_POSTAL, "Postal",),
        (constants.ADDRESSTYPE__NAME_PARCEL, "Parcel",),
        (constants.ADDRESSTYPE__NAME_PREF, "Preferred",),
        (constants.ADDRESSTYPE__NAME_OTHER, "Other",),
    ]

    for name, verbose in address_types:
        AddressType.objects.create(name=name, verbose=verbose)

def remove_address_types(apps, schema_editor):
    AddressType = apps.get_model("address_book", "AddressType")

    AddressType.objects.all().delete()


def insert_crypto_networks(apps, schema_editor):
    CryptoNetwork = apps.get_model("address_book", "CryptoNetwork")

    crypto_networks = [
        ("Avalanche", "AVAX",),
        ("Binance Coin", "BNB",),
        ("Bitcoin", "BTC",),
        ("Cardano", "ADA",),
        ("Dai", "DAI",),
        ("Dogecoin", "DOGE",),
        ("Ethereum", "ETH",),
        ("Euro Coin", "EURC",),
        ("Ripple", "XRP",),
        ("Solana", "SOL",),
        ("Tether", "USDT",),
        ("USD Coin", "USDC",),
    ]

    for name, symbol in crypto_networks:
        CryptoNetwork.objects.create(name=name, symbol=symbol)

def remove_crypto_networks(apps, schema_editor):
    CryptoNetwork = apps.get_model("address_book", "CryptoNetwork")

    CryptoNetwork.objects.all().delete()
    
    
def insert_email_types(apps, schema_editor):
    EmailType = apps.get_model("address_book", "EmailType")

    email_types = [
        (constants.EMAILTYPE__NAME_HOME, "Home",),
        (constants.EMAILTYPE__NAME_WORK, "Work",),
        (constants.EMAILTYPE__NAME_PREF, "Preferred",),
        (constants.EMAILTYPE__NAME_OTHER, "Other",),
    ]

    for name, verbose in email_types:
        EmailType.objects.create(name=name, verbose=verbose)

def remove_email_types(apps, schema_editor):
    EmailType = apps.get_model("address_book", "EmailType")

    EmailType.objects.all().delete()


def insert_nations(apps, schema_editor):
    Nation = apps.get_model("address_book", "Nation")

    with open(f"{settings.BASE_DIR}/country_data.csv", newline="") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            Nation.objects.create(code=row["alpha-3"], verbose=row["name"])

def remove_nations(apps, schema_editor):
    Nation = apps.get_model("address_book", "Nation")

    Nation.objects.all().delete()
    
    
def insert_phonenumber_types(apps, schema_editor):
    PhoneNumberType = apps.get_model("address_book", "PhoneNumberType")

    phonenumber_types = [
        (constants.PHONENUMBERTYPE__NAME_HOME, "Home",),
        (constants.PHONENUMBERTYPE__NAME_WORK, "Work",),
        (constants.PHONENUMBERTYPE__NAME_CELL, "Mobile",),
        (constants.PHONENUMBERTYPE__NAME_FAX, "Fax",),
        (constants.PHONENUMBERTYPE__NAME_PAGER, "Pager",),
        (constants.PHONENUMBERTYPE__NAME_VOICE, "Voice",),
        (constants.PHONENUMBERTYPE__NAME_VIDEO, "Video",),
        (constants.PHONENUMBERTYPE__NAME_TEXT, "Text",),
        (constants.PHONENUMBERTYPE__NAME_TEXTPHONE, "Textphone",),
        (constants.PHONENUMBERTYPE__NAME_PREF, "Preferred",),
        (constants.PHONENUMBERTYPE__NAME_OTHER, "Other",),
    ]

    for name, verbose in phonenumber_types:
        PhoneNumberType.objects.create(name=name, verbose=verbose)

def remove_phonenumber_types(apps, schema_editor):
    PhoneNumberType = apps.get_model("address_book", "PhoneNumberType")

    PhoneNumberType.objects.all().delete()
    
    
def insert_professions(apps, schema_editor):
    Profession = apps.get_model("address_book", "Profession")

    professions = {
        "Accountant",
        "Architect",
        "Businessman",
        "Content Creator",
        "Dentist",
        "Electrician",
        "English Teacher",
        "Entrepeneur",
        "Estate Agent",
        "Footvolley Professor",
        "Graphic Designer",
        "Osteopath",
        "Physiotherapist",
        "Salesman",
        "Software Developer",
        "Writer",
    }

    for profession in professions:
        Profession.objects.create(name=profession)

def remove_professions(apps, schema_editor):
    Profession = apps.get_model("address_book", "Profession")

    Profession.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('address_book', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(insert_address_types, remove_address_types),
        migrations.RunPython(insert_crypto_networks, remove_crypto_networks),
        migrations.RunPython(insert_email_types, remove_email_types),
        migrations.RunPython(insert_nations, remove_nations),
        migrations.RunPython(insert_phonenumber_types, remove_phonenumber_types),
        migrations.RunPython(insert_professions, remove_professions),
    ]